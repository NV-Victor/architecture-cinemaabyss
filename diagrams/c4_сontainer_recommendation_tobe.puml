@startuml C4_Elements

!include ./C4-PlantUML-Git/C4_Container.puml
!include <office/users/users.puml>

title Контейнерная диаграмма - Кинобездна: Recommendation Service TO-BE

'Пользователи

Person_Ext(Customer, "Пользователи", $sprite="users")
Person(User, "Администраторы", $sprite="users")


'Система Кинобездна
System_Boundary(CinemaAbyss, Кинобездна) {
  Container(WebApp, "Web Application", "", "Веб интерфейс для подключения через ноутбуки")
  Container(MobileApp, "Mobile Application", "", "Мобильное подключение")
  Container(SmartTVApp, "SmartTV Application", "", "Приложение SmartTV для подключения с приставки")
  ContainerQueue(EventBroker, "Event Broker", "RabbitMQ", "Брокер сообщений для рекомендаций")
  ContainerDb(Database, "Database", "PostgreSQL", "Централизованная база данных")

  'Новые микросервисы
  Container(ProxyService, "Proxy Service", "Kong", "Маршрутизация запросов")
  Container(RecommendationService, "Recommendation Service", "", "Работа с рекомендациями")
  Container(EventsService, "EventsService", "Apache Kafka", "Коммуникация между сервисами")
}

'Внешнее окружение системы Кинобездна
Container_Ext(RecommendationSystem	, "Рекомендательная система")

'Отношение от пользователей
Rel(Customer, WebApp, "Использует систему через ноутбуки")
Rel(Customer, MobileApp, "Использует систему через мобильное приложение")
Rel(Customer, SmartTVApp, "Использует систему через SmartTV приставку")
Rel(User, WebApp, "Администрирует систему")


'Отношение от Frontend
Rel(WebApp, ProxyService, "")
Rel(MobileApp, ProxyService, "")
Rel(SmartTVApp, ProxyService, "")


'Отношения от Proxy Service
Rel(ProxyService, RecommendationService, "Получение рекомендаций")

'Отношения от RecommendationService
Rel(RecommendationService, EventsService, "Отправляет события по рекомендациям")
BiRel(RecommendationService, EventBroker, "Запрашивает рекомендации")
Rel(RecommendationService, Database, "Сохраняет данные по рекомендациям")

BiRel(EventBroker, RecommendationSystem, "Запрашивает рекомендации")

@enduml
