version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: cinemaabyss-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./src/database/create-dbs.sql:/docker-entrypoint-initdb.d/01-create-dbs.sql
      - ./src/database/init.sql:/docker-entrypoint-initdb.d/02-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cinemaabyss-network

  # ZooKeeper for Kafka
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: cinemaabyss-zookeeper
    ports:
      - "2181:2181"
    networks:
      - cinemaabyss-network

  # Kafka
  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    container_name: cinemaabyss-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "movie-events:1:1,user-events:1:1,payment-events:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092"]
      interval: 10s
      timeout: 5s
      retries: 5  
    networks:
      - cinemaabyss-network

  # Monolith Service
  monolith:
    build:
      context: ./src/monolith
      dockerfile: Dockerfile
    container_name: cinemaabyss-monolith
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      PORT: 8080
      DB_CONNECTION_STRING: postgres://postgres:postgres_password@postgres:5432/cinemaabyss?sslmode=disable
    networks:
      - cinemaabyss-network

  # Movies Microservice
  movies-service:
    build:
      context: ./src/microservices/movies
      dockerfile: Dockerfile
    container_name: cinemaabyss-movies-service
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      PORT: 8081
      DB_CONNECTION_STRING: postgres://postgres:postgres_password@postgres:5432/cinemaabyss?sslmode=disable
    networks:
      - cinemaabyss-network

  # Events Microservice
  events-service:
    build:
      context: ./src/microservices/events
      dockerfile: Dockerfile
    container_name: cinemaabyss-events-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      PORT: 8082
      KAFKA_BROKERS: kafka:9092
    networks:
      - cinemaabyss-network

  # Proxy Service Migration (API Gateway - Инициализация базы данных Kong)
  proxy-service-migrations:
    image: kong:3.6
    container_name: cinemaabyss-proxy-service-migrations
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: postgres
      KONG_PG_PASSWORD: postgres_password
      KONG_PG_DATABASE: kong
    command: kong migrations bootstrap
    networks:
      - cinemaabyss-network

  # Proxy Service (API Gateway - Kong)
  proxy-service:
    image: kong:3.6
    container_name: cinemaabyss-proxy-service
    depends_on:
      proxy-service-migrations:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: postgres
      KONG_PG_PASSWORD: postgres_password
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    networks:
      - cinemaabyss-network

  proxy-service-init:
    image: curlimages/curl
    container_name: cinemaabyss-proxy-service-init
    depends_on:
      proxy-service:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c", "sh /kong-init.sh"]
    volumes:
      - ./kong-init.sh:/kong-init.sh
    networks:
      - cinemaabyss-network

# Kafka UI for monitoring Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: cinemaabyss-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: cinemaabyss
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - cinemaabyss-network

volumes:
  postgres-data:

networks:
  cinemaabyss-network:
    name: cinemaabyss-network
    driver: bridge